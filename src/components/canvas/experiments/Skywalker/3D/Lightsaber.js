/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useEffect, useRef, useState } from 'react';
import {
  PositionalAudio,
  shaderMaterial,
  useCursor,
  useGLTF,
} from '@react-three/drei';
import model from '../models/lightsaber_luke.glb';
import vertexShader from '../shaders/saber/vert.glsl';
import fragmentShader from '../shaders/saber/frag.glsl';
import { extend, useFrame } from '@react-three/fiber';
import { Color } from 'three';
import { Select } from '@react-three/postprocessing';
import { useSpring, animated } from '@react-spring/three';
import { damp } from 'three/src/math/MathUtils';
import OnSound from '../sounds/on.mp3';
import OffSound from '../sounds/off.mp3';
import HumSound from '../sounds/hum.mp3';
import { useControls } from 'leva';

const SaberMaterial = shaderMaterial(
  { uColor: new Color() },
  vertexShader,
  fragmentShader
);

extend({ SaberMaterial });

const Lightsaber = (props) => {
  const ref = useRef();
  const bladeRef = useRef();
  const lightRef = useRef();
  const hiltRef = useRef();
  const onSoundRef = useRef();
  const offSoundRef = useRef();
  const humSoundRef = useRef();

  const [on, setOn] = useState(false);
  const [hovered, setHovered] = useState(false);
  const [sound, setSound] = useState(false);

  useCursor(hovered);

  const { color } = useControls('Saber', {
    color: { value: '#00ff00' },
  });

  const { length } = useSpring({
    length: on ? 1 : 0,
    config: {
      duration: on ? 150 : 500,
    },
  });

  useEffect(() => {
    if (!sound) return;

    if (on) {
      onSoundRef.current.play();
      humSoundRef.current.play();
      humSoundRef.current.setVolume(1);
    } else {
      offSoundRef.current.play();
      humSoundRef.current.pause();
    }
  }, [on, sound]);

  useFrame(({ mouse, clock }, delta) => {
    let rx = Math.PI * 2 + Math.cos(clock.elapsedTime * 0.25) * 2;

    if (on) {
      ref.current.rotation.z = damp(
        ref.current.rotation.z,
        Math.PI / 2,
        4,
        delta
      );

      ref.current.rotation.x = damp(
        ref.current.rotation.x,
        Math.PI * 2,
        4,
        delta
      );

      ref.current.position.y = damp(ref.current.position.y, -3, 4, delta);
    } else {
      ref.current.position.x = damp(ref.current.position.x, 0, 4, delta);
      ref.current.position.y = damp(ref.current.position.y, 0, 4, delta);
      ref.current.position.z = damp(ref.current.position.z, 0, 4, delta);

      ref.current.rotation.x = damp(ref.current.rotation.x, rx, 4, delta);
      ref.current.rotation.y = damp(ref.current.rotation.y, 0, 4, delta);
      ref.current.rotation.z = damp(ref.current.rotation.z, 0, 4, delta);
    }

    if (bladeRef.current.scale.x > 0) {
      bladeRef.current.visible = true;
    } else {
      bladeRef.current.visible = false;
    }
  });

  const { nodes, materials } = useGLTF(model);
  return (
    <group ref={ref} {...props} dispose={null}>
      <group
        ref={hiltRef}
        onPointerEnter={() => setHovered(true)}
        onPointerLeave={() => setHovered(false)}
        onClick={(e) => {
          e.stopPropagation();
          setSound(true);
          onSoundRef.current.context.resume();
          setOn((prev) => !prev);
        }}
      >
        <mesh
          geometry={nodes.lightMetal.geometry}
          material={materials['base metal']}
          position={[-0.6194, -0.00798, 0.00015]}
        />
        <mesh
          geometry={nodes.dark_metal.geometry}
          material={materials['dark metal']}
          position={[-6.11296, 0.11445, -0.00308]}
        />
        <mesh
          geometry={nodes.copper.geometry}
          material={materials.copper}
          position={[1.1202, 0.07744, -0.00012]}
        />
      </group>
      <group>
        <animated.pointLight
          ref={lightRef}
          position={[4.75, 0, 0]}
          color={color}
          intensity={on * 0.25}
        />
        <PositionalAudio
          ref={onSoundRef}
          loop={false}
          url={OnSound}
          autoplay={false}
        />
        <PositionalAudio
          ref={offSoundRef}
          loop={false}
          url={OffSound}
          autoplay={false}
        />
        <PositionalAudio
          ref={humSoundRef}
          loop={true}
          url={HumSound}
          autoplay={false}
        />
        <Select name='saber' enabled>
          <animated.mesh
            ref={bladeRef}
            geometry={nodes.blade.geometry}
            position={[2.39, 0.00556, 0.00031]}
            scale-x={length}
          >
            <saberMaterial uColor={color} />
          </animated.mesh>
        </Select>
      </group>
    </group>
  );
};

useGLTF.preload(model);

export default Lightsaber;
